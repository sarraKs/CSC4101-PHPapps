<?php

namespace App\Command;

use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use App\Entity\Film;
use App\Repository\FilmRepository;
use Doctrine\Persistence\ManagerRegistry;

#[AsCommand(
    name: 'app:list-films',
    description: 'List of films',
)]
class ListFilmsCommand extends Command
{
    private ?FilmRepository $filmRepository;
    
    public function __construct(ManagerRegistry $doctrineManager)
    {
        $this->filmRepository = $doctrineManager->getRepository(Film::class);
        
        parent::__construct();
    }

    protected function configure(): void
    {
        $this
        //->setDescription('List films')
        ->addArgument('year', InputArgument::OPTIONAL, 'Filter films of a single year')
        ->addOption('unique', null, InputOption::VALUE_NONE, 'Avoid listing remakes')
        ;
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);
        $year = $input->getArgument('year');
        $option = $input->getOption('unique');
        
            
        if ($year) {
            $films = $this->filmRepository->findBy(
                ['year' => $year],
                ['title' => 'ASC']);
            $io->title('list of films:');
            $io->listing($films);
            
            if ($option) {
                // tableau PHP standard
                $titles = array();
                foreach($films as $film) {
                    // ajout de valeurs au tableau
                    array_push($titles, $film);
                }
                // filtre pour ne garder que des valeurs uniques du tableau
                print array_unique($titles);
            }
            
            return Command::SUCCESS;
        } else {
            $films = $this->filmRepository->findAll();
            if (! $films) {
                $io->error('no films found!');
                return Command::FAILURE;
            } else {
                $io->title('list of films:');
                
                $io->listing($films);
                
                return Command::SUCCESS;
            }
        }
        
        
        
    }
}
